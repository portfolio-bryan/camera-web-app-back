package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/bperezgo/rtsp/graph/model"
	"github.com/bperezgo/rtsp/internal/domain/aggregates/place"
	"github.com/samber/lo"
)

// GetPlaces is the resolver for the getPlaces field.
func (r *queryResolver) GetPlaces(ctx context.Context, criteria *model.GetPlacesCriteria) ([]*model.Place, error) {
	ctx, span := r.observabilityProvider.StartSpan(ctx, "queryResolver.GetPlaces")
	defer span.End()

	places, err := r.placesService.GetPlaces(ctx)

	if err != nil {
		return []*model.Place{}, err
	}

	return lo.Map(places, func(p place.Place, _ int) *model.Place {
		dto := p.ToDTO()

		return &model.Place{
			ID:     dto.ID,
			Name:   dto.Name,
			UserID: dto.UserID,
		}
	}), nil
}

// GetCameras is the resolver for the getCameras field.
func (r *queryResolver) GetCameras(ctx context.Context, criteria *model.GetCamerasCriteria) ([]*model.Camera, error) {
	_, span := r.observabilityProvider.StartSpan(ctx, "queryResolver.GetCameras")
	defer span.End()

	return []*model.Camera{
		{
			ID:      "1",
			PlaceID: "1",
			UserID:  "1",
		},
		{
			ID:      "2",
			PlaceID: "1",
			UserID:  "1",
		},
		{
			ID:      "3",
			PlaceID: "1",
			UserID:  "1",
		},
		{
			ID:      "4",
			PlaceID: "1",
			UserID:  "1",
		},
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// type ErrorTest struct{}

// func (e *ErrorTest) Error() string {
// 	return "Error Test"
// }
// func (e *ErrorTest) Code() errors.ErrorCode {
// 	return errors.ErrorCode("error_test")
// }
// func (e *ErrorTest) Type() errors.ErrorType {
// 	return errors.BusinessErrorType
// }
